# 문제를 풀 당시 생각 과정을 기입

'''
- 접근 근거가 무엇인지 적어보기

2xN 타일링 문제와 유사하게 접근할 수 있다. 단, 2x2 타일이 추가된 것이다.

예를 들어, n이 4일 때 타일의 경우의 수는 다음과 같이 만들어진다:
n=3인 경우의 수에 1x2 타일을 하나 붙이는 경우
n=2인 경우의 수에 2x2 타일을 하나 붙이는 경우 또는 2x1 타일 두 개를 붙이는 경우

이를 통해 점화식을 도출할 수 있다:
d[n] = d[n-1] + d[n-2] * 2

- 나의 접근에 문제점이 무엇일까 생각해보기

- 시간 복잡도를 고려해보기
이 알고리즘은 기본적으로 O(n)이다. 각 n에 대해 한 번의 덧셈 연산을 수행하므로 선형 시간 복잡도를 가진다.
'''

# 풀이 코드 기입
N = int(input())
d = [0] * 1001
d[0] = 0
d[1] = 1
d[2] = 3
for i in range(3, N + 1):
	d[i] = d[i - 2] * 2 + d[i - 1]
print(d[N] % 10007)
