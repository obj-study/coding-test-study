# 문제를 풀 당시 생각 과정 기입
'''
- 접근 근거가 무엇인지 적어보기
2xn 크기의 직사각형에 1x2, 2x1 타일로 채우는 경우의 수를 구해야 한다. 
- n이 1인 경우: 2x1 타일을 하나 두는 1가지 방법.
- n이 2인 경우: 2x1 타일 두 개 또는 1x2 타일 두 개를 두는 2가지 방법.
- n이 3인 경우: 1x2 타일 세 개, 2x1 타일 두 개와 1x2 타일 한 개 등 3가지 방법.

타일을 쌓는 방법을 분석해보면:
- 1x2 타일로 시작하는 경우는 직전의 경우의 수와 동일하다.
- 2x1 타일 두 개로 시작하는 경우는 두번째 전의 경우의 수와 동일하다.

이를 통해 점화식을 도출할 수 있다:
- d[n] = d[n-1] + d[n-2]

- 나의 접근에 문제점이 무엇일까 생각해보기

- 시간 복잡도를 고려해보기
이 알고리즘은 기본적으로 O(n)이다. 각 n에 대해 한 번의 덧셈 연산을 수행하므로 선형 시간 복잡도를 가진다.

'''

# 풀이 코드 기입
n = int(input())

d = [0] * 1001

d[1] = 1
d[2] = 2

for i in range(3, 1001):
    d[i] = (d[i-1] + d[i-2]) % 10007

print(d[n])

# 피드백 후 정리(알게된 점, 포인트 등)
'''
문제를 보고 어떻게 접근해야 할 지 모르겠다면 무조건 완전 탐색으로 먼저 접근해본다.
완전 탐색으로 접근해서 생각해봐야 문제가 이해되고 dp인지, 어떤 또 다른 접근을 할 수 있을지 감이 온다.
'''