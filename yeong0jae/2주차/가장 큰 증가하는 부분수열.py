# https://www.acmicpc.net/problem/11055

# 문제를 풀 당시 생각 과정을 기입
'''
- 접근 근거가 무엇인지 적어보기
보자마자 계단오르기 문제랑 비슷하다고 생각했다
i번째 수 까지 고려했을 때 합이 가장 큰 증가하는 부분수열의 합을 d라고 두었다.
이중 반복문으로 해결되는 원리는
1. 수열을 i개만 고려했을때
2. i개 내에서 가장 큰 증가하는 부분수열 탐색하기

- 나의 접근에 문제점이 무엇일까 생각해보기
수열을 i개만 고려했을때만 생각했다.
그 안에서 탐색을 또 해도됐는데. 그 당위성은 시간복잡도에서 나온다. (n이 1000)ㄴ

- 시간 복잡도를 고려해보기
시간복잡도는 n^2이기 때문에 n이 20000이하면 가능.

'''

# 풀이 코드 기입
n = int(input())

array = list(map(int, input().split()))

d = [1] * n
d[0] = array[0]
for i in range(1, n):
  for j in range(i): # 일차원 반복문으로 코드를 짜면, 앞 쪽이 고려되지 알 수 있는데, 이 때 n의 크기를 보고 이중 반복문을 활용할 생각을 해야함
    if array[j] < array[i]:
      d[i] = max(d[i], d[j] + array[i]) # ai가 더 크면 이전 d에 넣어보고
    else:
      d[i] = max(d[i], array[i]) # ai가 더 작으면 ai만 넣어보고

print(max(d))
